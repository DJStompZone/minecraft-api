openapi: 3.0.0
info:
  title: Minecraft API
  version: "2.0"
  license:
    name: MIT
  description: ""
  contact:
    name: Anish Shanbhag
    url: "https://github.com/anish-shanbhag"
servers:
  - url: "https://minecraft-api.vercel.app/api"
paths:
  /items:
    get:
      summary: Get Items
      tags:
        - Endpoints
      operationId: get-items
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: "The maximum number of items to return from this query. If excluded, the query returns all items."
          style: ""
        - schema:
            type: number
            default: 1
          in: query
          name: page
          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the items into pages of length `limit` and returning the `page`th one.
        - schema:
            type: string
            default: item
            enum:
              - name
              - namespacedId
              - description
              - image
              - stackSize
          in: query
          name: sort
          description: Sorts the items by this field.
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: order
          description: 'Whether to sort the items ascending or descending using the `sort` parameter. `"asc"` sorts ascending, while `"desc"` sorts descending.'
        - schema:
            default: "*"
            example:
              - name
              - image
              - stackSize
            uniqueItems: false
          in: query
          name: fields
          description: "The fields of the item object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included."
        - schema:
            type: number
            enum:
              - 1
              - 16
              - 64
          in: query
          name: stackSize
          description: Filters the items by including only those with a certain stack size.
      description: Get an array of Minecraft items.
      responses:
        "200":
          description: OK - sent when the request was processed successfully. The body will contain the array of items.
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the item.
                    namespacedId:
                      type: string
                      description: "The namespaced ID of this item, which is used to identify the item in game when using commands."
                    description:
                      type: string
                      description: A short description of the item and its uses. Certain items that fall under a common category share a single description.
                    image:
                      type: string
                      description: "A link to a 16x16 image of the item, which is usually displayed inside the player's inventory."
                    stackSize:
                      type: number
                      description: "The maximum number of this item which can fit in a single stack of the player's inventory. Can be 1, 16, or 64."
              examples:
                Example 1:
                  value:
                    - name: Acacia Boat
                      namespacedId: acacia_boat
                      description: A boat is both an item and a vehicle entity.
                      image: "https://minecraft-api.vercel.app/images/items/acacia_boat.png"
                      stackSize: 1,
                      renewable: true
                    - name: Acacia Button
                      namespacedId: acacia_button
                      description: A button is a non-solid block that can provide temporary redstone power.
                      image: "https://minecraft-api.vercel.app/images/items/acacia_button.png"
                      stackSize: 64,
                      renewable: true
                Example 2:
                  value:
                    - name: Fishing Rod
                      description: A fishing rod is a tool used primarily for fishing.
                      image: "https://minecraft-api.vercel.app/images/items/fishing_rod.png"
                    - name: Fletching Table
                      description: A fletching table is a fletcher's job site block that can generate naturally in villages.
                      image: "https://minecraft-api.vercel.app/images/items/fletching_table.png"
                    - name: Flint
                      description: Flint is a mineral obtained from gravel.
                      image: "https://minecraft-api.vercel.app/images/items/flint.png"
        "400":
          description: Bad Request - sent when you pass the `page` parameter but not the `limit` parameter.
        "500":
          description: "Internal Server Error - usually sent when you pass invalid fields for the `sort` or `fields` parameters, but it could also indicate a different server error as well."
  /blocks:
    get:
      summary: Get Blocks
      tags:
        - Endpoints
      responses:
        "200":
          description: OK - sent when the request was processed successfully. The body will contain the array of blocks.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the block.
                    namespacedId:
                      type: string
                      description: "The namespaced ID of this block, which is used to identify the block in game when using commands."
                    description:
                      type: string
                      description: A short description of the block and its uses. Certain blocks that fall under a common category share a single description.
                    image:
                      type: string
                      description: "A link to an image of the block. Image sizes can vary between blocks, but most are 200x200 or smaller. Not all blocks have an image (e.g. Air)."
                    transparent:
                      type: boolean
                      description: Whether this block is considered transparent by the game (does not necessarily correspond to the block being see-through).
                    luminance:
                      type: number
                      description: 'The amount of light that this block gives off. Higher values mean brighter blocks. Some blocks only give off light in certain situations; in those cases, the `luminance` represents the amount of light the block gives off when it is actually "activated".'
                    blastResistance:
                      type: number
                      description: A measure of how well this block withstands explosions. Higher values mean that it takes a stronger explosion to destroy the block.
                    flammable:
                      type: boolean
                      description: Whether or not this block can catch fire from nearby blocks. Flammable blocks can also be destroyed after they burn for some time.
                    tool:
                      type: string
                      description: The tool which breaks this block the fastest.
              examples:
                Example 1:
                  value:
                    - name: Anvil
                      namespacedId: anvil
                      description: "An anvil is a block that allows players to repair items, rename items, and combine enchantments."
                      image: "https://minecraft-api.vercel.app/images/blocks/anvil.png"
                      item: "Anvil"
                      transparent: true
                      luminance: 0
                      blastResistance: 1200
                      flammable: false
                      tool: Pickaxe
                    - name: Attached Melon Stem
                      namespacedId: attached_melon_stem
                      description: Melon seeds are an item that can be used to grow melon plants.
                      image: "https://minecraft-api.vercel.app/images/blocks/attached_melon_stem.png"
                      item: null
                      transparent: true
                      luminance: 0
                      blastResistance: 2
                      flammable: false
                      tool: Axe
                Example 2:
                  value:
                    - name: Tall Grass
                      image: "https://minecraft-api.vercel.app/images/blocks/tall_grass.png"
                      luminance: 0
                      blastResistance: 0
                    - name: Tall Seagrass
                      image: "https://minecraft-api.vercel.app/images/blocks/tall_seagrass.png"
                      luminance: 0
                      blastResistance: 0
                    - name: Terracotta
                      image: "https://minecraft-api.vercel.app/images/blocks/terracotta.png"
                      luminance: 0
                      blastResistance: 4.2
                    - name: Torch
                      image: "https://minecraft-api.vercel.app/images/blocks/torch.png"
                      luminance: 14
                      blastResistance: 0
        "400":
          description: "Bad Request - sent when an invalid string is passed for the `color` parameter (it must be a hexadecimal color of the form #FFFFFF)."
        "500":
          description: "Internal Server Error - usually sent when you pass invalid fields for the `sort` or `fields` parameters, but it could also indicate a different server error as well."
      operationId: get-blocks
      description: "Get an array of Minecraft blocks, including those which can't normally be obtained as items in the inventory."
      parameters:
        - schema:
            type: number
            minimum: ""
            maximum: ""
          in: query
          name: limit
          description: "The maximum number of blocks to return from this query. If excluded, the query returns all blocks."
          style: ""
        - schema:
            type: number
            default: 1
          in: query
          name: page
          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the blocks into pages of length `limit` and returning the `page`th one.
        - schema:
            type: string
            default: name
            enum:
              - name
              - namespacedId
              - description
              - image
              - transparent
              - luminance
              - blastResistance
              - flammable
              - tool
          in: query
          name: sort
          description: Sorts the blocks by this field.
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: order
          description: 'Whether to sort the blocks ascending or descending using the `sort` parameter. `"asc"` sorts ascending, while `"desc"` sorts descending.'
        - schema:
            default: "*"
            example:
              - name
              - image
              - blastResistance
            uniqueItems: false
          in: query
          name: fields
          description: "The fields of the block object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included."
        - schema:
            type: string
            example: "#BFA32C"
            pattern: "#^#[0-9A-F]{6}$"
          in: query
          name: color
          description: Filters the returned blocks by only including those within a certain threshold (`colorVariance`) of `color`. Should be a valid hexadecimal representation of a color.
        - schema:
            type: number
            minimum: 0
            maximum: 255
            default: 20
          in: query
          name: colorVariance
          description: 'Changes the maximum variance between a block''s color and the `color` parameter. Only has an affect when the `color` parameter is also passed. Higher values result in blocks which are a "farther away" color being included, while lower values restrict the blocks to only those which are close to `color`.'
        - schema:
            type: number
            default: 0.1
            minimum: 0
            maximum: 1
          in: query
          name: colorAmount
          description: "Changes the minimum portion of a block which has to be a matching color defined by `color` and `colorVariance`. For example, passing an orange color for `color` and a high value for `colorAmount` may exclude Hay Bale from the result because only a small portion of the Hay Bale is orange."
        - schema:
            type: boolean
          in: query
          name: transparent
          description: Filters the blocks by including only those with a certain value for the `transparent` field.
        - schema:
            type: number
          in: query
          name: luminance
          description: Filters the blocks by including only those with a certain value for the `luminance` field.
        - schema:
            type: number
          in: query
          name: minLuminance
          description: Filters the blocks by including only those with a value for the `luminance` field that is greater than `minLuminance`.
        - schema:
            type: number
          in: query
          name: maxLuminance
          description: Filters the blocks by including only those with a value for the `luminance` field that is less than `maxLuminance`.
        - schema:
            type: number
          in: query
          name: blastResistance
          description: Filters the blocks by including only those with a certain value for the `blastResistance` field.
        - schema:
            type: number
          in: query
          name: minBlastResistance
          description: Filters the blocks by including only those with a value for the `blastResistance` field that is greater than `minBlastResistance`.
        - schema:
            type: number
          in: query
          name: maxBlastResistance
          description: Filters the blocks by including only those with a value for the `blastResistance` field that is less than `maxBlastResistance`.
        - schema:
            type: boolean
          in: query
          name: flammable
          description: Filters the blocks by including only those with a certain value for the `flammable` field.
        - schema:
            type: string
            enum:
              - Pickaxe
              - Hoe
              - Axe
              - Shovel
              - Sword
              - Shears
          in: query
          name: tool
          description: Filters the blocks by including only those with a certain value for the `tool` field.
      requestBody: {}
  /crafting-recipes:
    get:
      summary: Get Crafting Recipes
      tags:
        - Endpoints
      responses:
        "200":
          description: OK - sent when the request was processed successfully. The body will contain the array of crafting recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    item:
                      type: object
                      description: "The name of the item which this recipe produces."
                    quantity:
                      type: number
                      description: The number of items which are produced from this recipe.
                    shapeless:
                      type: boolean
                      description: "Whether or not this recipe is shapeless, meaning that its ingredients can be placed in any order in the crafting grid."
                    recipe:
                      type:
                        - array
                      description: "An array of eight elements each representing one slot of the crafting grid, from left to right and top to bottom (like a book)."
                      items:
                        oneOf:
                          - type: "null"
                            description: A null value represents no item in that slot of the crafting grid.
                          - type: string
                            description: "The `name` of an item which needs to be in that slot."
                          - type: array
                            description: "In certain recipes, you can use substitute different ingredients in a slot while still crafting the same item. For example, to craft a Note Block, you can use any wood plank type in each slot around the Redstone Dust, and you will still get a Note Block. In cases such as these, an array is used in place of an item string in one of the crafting grid slots. The array represents all of the possible ingredients which can be substituted for each other in that slot."
                            items:
                              oneOf:
                                - type: "null"
                                  description: A `null` value represents no item in that slot of the crafting grid.
                                - type: string
                                  description: "The `name` of an item which needs to be in that slot."
              examples:
                Example 1:
                  value:
                    - item: Bone Meal
                      quantity: 9
                      shapeless: false
                      recipe:
                        - null
                        - null
                        - null
                        - null
                        - Bone Block
                        - null
                        - null
                        - null
                        - null
                    - item: Book
                      quantity: 1
                      shapeless: true
                      recipe:
                        - null
                        - null
                        - null
                        - Paper
                        - Paper
                        - null
                        - Paper
                        - Leather
                        - null
                    - item: Book and Quill
                      quantity: 1
                      shapeless: true
                      recipe:
                        - null
                        - null
                        - null
                        - Book
                        - Ink Sac
                        - null
                        - null
                        - Feather
                        - null
                    - item: Bookshelf
                      quantity: 1
                      shapeless: false
                      recipe:
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                        - Book
                        - Book
                        - Book
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                        - - Oak Planks
                          - Spruce Planks
                          - Birch Planks
                          - Jungle Planks
                          - Acacia Planks
                          - Dark Oak Planks
                'Example 2 - item = "Composter"':
                  value:
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Oak Slab
                        - null
                        - Oak Slab
                        - Oak Slab
                        - null
                        - Oak Slab
                        - Oak Slab
                        - Oak Slab
                        - Oak Slab
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Spruce Slab
                        - null
                        - Spruce Slab
                        - Spruce Slab
                        - null
                        - Spruce Slab
                        - Spruce Slab
                        - Spruce Slab
                        - Spruce Slab
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Acacia Slab
                        - null
                        - Acacia Slab
                        - Acacia Slab
                        - null
                        - Acacia Slab
                        - Acacia Slab
                        - Acacia Slab
                        - Acacia Slab
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Dark Oak Slab
                        - null
                        - Dark Oak Slab
                        - Dark Oak Slab
                        - null
                        - Dark Oak Slab
                        - Dark Oak Slab
                        - Dark Oak Slab
                        - Dark Oak Slab
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Birch Slab
                        - null
                        - Birch Slab
                        - Birch Slab
                        - null
                        - Birch Slab
                        - Birch Slab
                        - Birch Slab
                        - Birch Slab
                    - item: Composter
                      quantity: 1
                      shapeless: false
                      recipe:
                        - Jungle Slab
                        - null
                        - Jungle Slab
                        - Jungle Slab
                        - null
                        - Jungle Slab
                        - Jungle Slab
                        - Jungle Slab
                        - Jungle Slab
                'Example 5 - item = "Arrow", fields = ["item", "recipe"]':
                  value:
                    - item: Arrow
                      recipe:
                        - null
                        - Flint
                        - null
                        - null
                        - Stick
                        - null
                        - null
                        - Feather
                        - null
        "404":
          description: Not Found - sent when there is no item corresponding to the `item` query parameter.
        "500":
          description: "Internal Server Error - usually sent when you pass invalid fields for the `fields` or `itemFields` parameters, but it could also indicate a different server error as well."
      operationId: get-crafting-recipes
      description: Get an array of crafting recipes for Minecraft items.
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: "The maximum number of crafting recipes to return from this query. If excluded, the query returns all crafting recipes."
          style: ""
        - schema:
            type: number
            default: 1
          in: query
          name: page
          description: Allows for pagination of this query. You must pass the `limit` parameter if using this parameter as well. You can think of this as dividing the crafting recipes into pages of length `limit` and returning the `page`th one.
        - schema:
            type: string
            default: item
            enum:
              - item
              - quantity
              - shapeless
          in: query
          name: sort
          description: Sorts the crafting recipes by this field.
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: order
          description: 'Whether to sort the crafting recipes ascending or descending using the `sort` parameter. `"asc"` sorts ascending, while `"desc"` sorts descending.'
        - schema:
            default: "*"
            example:
              - item
              - shapeless
              - recipe
            uniqueItems: false
          in: query
          name: fields
          description: "The fields of the crafting recipe object to include in the response. Passing an array of strings results in all of those fields being included, while passing only a string results in only that single field being included. If you don't pass any value for this parameter, then all fields are included."
        - schema:
            type: string
          in: query
          name: item
          description: "Filters the crafting recipes by only returning the recipes which produce `item`."
        - schema:
            type: string
          in: query
          name: uses
          description: "Filters the crafting recipes by only including recipes that uses a certain item as an ingredient."
components:
  schemas: {}
